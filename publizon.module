<?php
/**
 * @file
 *
 */

/**
 * Define constances used in the client to indicate, which type of data we are
 * looking for.
 *
 * @see PublizonClient->getgetLastLoansForAll()
 */
define('PUBLIZON_EBOOK', 1);
define('PUBLIZON_NETSOUND', 2);

/**
 * Implements hook_perm().
 */
function publizon_perm() {
  return array(
    'administre publizon',
  );
}

/**
 * Implements hook_menu().
 */
function publizon_menu() {
  $items = array();

  $items['admin/settings/publizon'] = array(
    'title' => 'Publizon',
    'description' => 'Configuration of communication with the publizon web-service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publizon_admin_form'),
    'access arguments' => array('administre publizon'),
    'file' => 'include/publizon.admin.inc',
  );

  $items['admin/settings/publizon/library/ahah'] = array(
    'title' => 'Publizon ahah callback',
    'page callback' => 'publizon_admin_form_ahah',
    'access arguments' => array('administre publizon'),
    'type' => MENU_CALLBACK,
    'file' => 'include/publizon.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function publizon_theme() {
  return array(
    // Theme function for custom form element defined in publizon_elements().
    'publizon_library_field' => array(
      'arguments' => array('element' => NULL),
      'template' => 'templates/publizon-library-field',
    ),
    // Add action buttons to loans, products and ting objects.
    'publizon_actions' => array(
      'arguments' => array('product' => NULL, 'type' => ''),
      'template' => 'templates/publizon-actions',
    )
  );
}

/**
 * Implements hook_elsements().
 *
 * Defines custom form element which is used by the administration form to
 * handle library information.
 *
 * @see publizon_admin_form()
 */
function publizon_elements() {
  return array(
    'publizon_library_field' => array(
      '#input' => TRUE,
      '#process' => array('publizon_library_field_process'),
      '#element_validate' => array('publizon_library_field_validate'),
    ),
  );
}

/**
 * Implements hook_value().
 *
 * @see publizon_elements()
 */
function publizon_library_field_value($element, $edit = FALSE) {
  if (func_num_args() == 1) {
    return $element['#default_value'];
  }
  return $edit;
}

/**
 * Implementation of the library field process function.
 *
 * @see publizon_elements()
 */
function publizon_library_field_process($element, $edit, &$form_state, $complete_form) {
  return $element;
}

/**
 * Implementation of the library field validation function. It ensures that all
 * input fields contains data befor submitting the element.
 *
 * @see publizon_elements()
 */
function publizon_library_field_validate($element, &$form_state) {
  // First is to get the remove one more to work.
  if (!empty($element['#value']['retailer_id'])) {
    if (!is_numeric($element['#value']['retailer_id']) || (int)$element['#value']['retailer_id'] < 0) {
      form_error($element, t('!field have to be an interger.', array('!field' => t('Retailer ID'))));
      form_set_value($element, 0, $form_state);
    }

    if (empty($element['#value']['retailer_key_code'])) {
      form_error($element, t('!field are required.', array('!field' => t('Library key code'))));
      form_set_value($element, 0, $form_state);
    }

    if (empty($element['#value']['library_name'])) {
      form_error($element, t('!field are required.', array('!field' => t('Library name'))));
      form_set_value($element, 0, $form_state);
    }
  }

  return $element;
}

/**
 * Implements hook_flush_caches().
 *
 * Ensures that all caches used by the module is flush on cache clear. The
 * module also comes with drush support for clearing these caches.
 *
 * @see publizon.drush.inc
 */
function publizon_flush_caches() {
  return array('cache_publizon_product');
}


function template_preprocess_publizon_actions(&$vars) {
  $object_url = 'ting/object/' . (string)$vars['product']->getTingObject()->id;

  $vars['actions'] = array();
  switch ($vars['type']) {
    case 'loan':
      $vars['actions']['download'] =  l(t('Download'), $object_url . '/download', array('html' => true, 'attributes' => array('class' => 'loan')));
      break;

    default:
      break;
  }

  $i = 1;
}

/**
 * Helper function that extracts the name of the author(s) on a ting object.
 *
 * @param object $ting_object
 *  Ting object.
 * @param bool $link
 *  If the parameter is true the authors returned is search links else plain
 *  text.
 * @return string
 *  The author(s) found and the empty string if non is found.
 */
function publizon_get_authors($ting_object, $link = TRUE) {
  $authors = '';
  if (isset($ting_object->record["dc:creator"]["dkdcplus:aut"][0])) {
    if ($link) {
      $authors = l($ting_object->record["dc:creator"]["dkdcplus:aut"][0], 'ting/search/' . $ting_object->record["dc:creator"]["dkdcplus:aut"][0]);
    }
    else {
      $authors = $ting_object->record["dc:creator"]["dkdcplus:aut"][0];
    }
  }
  else {
    // Find all authors involed.
    $contributors = array();
    if (isset($ting_object->record['dc:contributor']['dkdcplus:edt'])) {
      $contributors = array_merge($contributors, $ting_object->record['dc:contributor']['dkdcplus:edt']);
    }
    if (isset($ting_object->record['dc:contributor']['dkdcplus:aut'])) {
      $contributors = array_merge($contributors, $ting_object->record['dc:contributor']['dkdcplus:aut']);
    }

    // Loop over the authors and create the string.
    sort($contributors);
    foreach ($contributors as $contributor) {
      if ($link) {
        $authors .= l($contributor, 'ting/search/' . $contributor) . ', ';
      }
      else {
        $authors .= $authors . ', ';
      }
    }
    $authors = drupal_substr($authors, 0, -2);
  }

  return $authors;
}

/**
 * Helper function that findes all libraries stored in the Publizon configuration
 * and returns the library names indexed by retailer id.
 *
 * @staticvar array $retailers
 *  Static cache used to speed-up the search if call more than once.
 * @param bool $reset
 *  If TRUE the static cache will be rebuild. Defaults to FALSE.
 * @return array
 *  Library names indexed by retailer id.
 */
function publizon_get_libraries($reset = FALSE) {
  static $retailers;
  if (!isset($retailers) || $reset) {
    $publizon = variable_get('publizon', array());
    if (empty($publizon) || !isset($publizon['libraries']) || !count($publizon['libraries'])) {
      // We are missing som library configureation here.
      drupal_set_message(t('You need to login as administrtor and configure Publizon library lists'), 'warning', FALSE);
      return array();
    }

    // Configuration load, so build library array.
    $retailers = array();
    foreach ($publizon['libraries'] as $library) {
      $retailers[$library['retailer_id']] = $library['library_name'];
    }
  }

  return $retailers;
}

/**
 * Helper function that loads Publizon configuration information about a given
 * library and return the information as an array. The array contains
 * retailer_id, retailer_key_code and library_name.
 *
 * @staticvar type $libraries
 *  Static cache used to speed-up the search if call more than once.
 * @param type $retailer_id
 *  Retailer id that identifies the library at Publizon.
 * @param type $reset
 *  If TRUE the static cache will be rebuild. Defaults to FALSE.
 * @return array
 *  Basic information about the library entered at the publizon administration
 *  interface.
 */
function publizon_get_library($retailer_id, $reset = FALSE) {
  static $libraries;
  if (!isset($libraries) || !isset($libraries[$retailer_id]) || $reset) {
    $publizon = variable_get('publizon', array());
    if (empty($publizon) || !isset($publizon['libraries']) || !count($publizon['libraries'])) {
      // We are missing som library configureation here.
      drupal_set_message(t('You need to login as administrtor and configure Publizon library lists'), 'warning', FALSE);
      return array();
    }

    $libraries = array();
    foreach ($publizon['libraries'] as $library) {
      if ($library['retailer_id'] == $retailer_id) {
        $libraries[$retailer_id] = $library;
        break;
      }
    }
  }

  return isset($libraries[$retailer_id]) ? $libraries[$retailer_id] : FALSE;
}

/**
 * Search the T!NG datawell for information based on the ISBN parsed to the
 * function. If more than one match is found only the first match is returned.
 *
 * @param string $isbn
 *  ISBN number for the product that is searched.
 * @return TingObject
 *  Datawell object for the product found, if non is found FALSE will be
 *  returned.
 */
function publizon_ting_find_object($isbn) {
  // Build ting request.
  $request = ting_get_request_factory()->getSearchRequest();
  $request = ting_add_agency($request);
  $request = ting_add_profile($request);

  // Try to fetch ting object based on ISBN number. Sadly not all object in
  // ebooks or net sound have ISBN, but uses oss:PROVIDER-ID, which we can not
  // search directly on (so no dc.identificer=*). Also therefor it have been
  // reanemd, because it dose not only find object by ISBN.
  $request->setQuery($isbn);
  $request->setNumResults(1);

  // Execute the fetch.
  $response = ting_execute($request);
  $object = FALSE;
  if (isset($response->collections[0]->objects[0])) {
    $object = $response->collections[0]->objects[0];
  }

  return $object;
}
